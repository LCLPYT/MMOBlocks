import java.util.stream.Collectors

plugins {
	id 'fabric-loom' version '0.6-SNAPSHOT'
	id 'maven-publish'
}

def getVersion() {
	try {
		ProcessBuilder builder = new ProcessBuilder("git", "describe", "--tags", "--abbrev=0")
		builder.directory(project.projectDir)
		println "Executing '" + builder.command().stream().collect(Collectors.joining(" ")) + "' in '" + builder.directory().getAbsolutePath() + "' ..."
		Process process = builder.start()
		StringBuilder out = new StringBuilder(), err = new StringBuilder()
		process.consumeProcessOutput(out, err)
		int exitCode = process.waitFor()
		if (exitCode != 0) {
			System.err.println err.toString()
			throw new IOException("Git error, make sure you have at least one tag")
		} else println out.toString()
		println "Git process exited with code " + exitCode

		String version = out.toString().trim().split("\\r?\\n")[0]
		if (!version.matches('^[0-9]+\\.[0-9]+\\.[0-9]+(?:-[a-z0-9]+)?$')) throw new IllegalStateException("Latest tag '${version}' does not match the required versioning scheme")

		return version
	} catch (Exception ex) {
		IllegalStateException wrapper = new IllegalStateException("Could not determine version")
		wrapper.addSuppressed(ex)
		throw wrapper
	}
}

Properties privateProps = new Properties()
File privatePropsFile = new File(project.projectDir, "private.properties")
if (privatePropsFile.exists()) {
	privatePropsFile.withInputStream {
		privateProps.load(it)
	}
}

sourceCompatibility = targetCompatibility = JavaVersion.VERSION_1_8

archivesBaseName = project.archives_base_name
version = getVersion()
group = project.maven_group

repositories {
	mavenCentral()

	maven {
		url "https://repo.lclpnet.work/repository/internal"
	}
}

dependencies {
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
	modImplementation "work.lclpnet.mods:mmocontent:${project.mmocontent_version}"

	implementation 'com.google.code.findbugs:jsr305:3.0.2'
}

loom {
	accessWidener = file("src/main/resources/mmoquark.accesswidener")
}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": project.version
	}
}

tasks.withType(JavaCompile).configureEach {
	it.options.encoding = "UTF-8"

	// The Minecraft launcher currently installs Java 8 for users, so your mod probably wants to target Java 8 too
	// JDK 9 introduced a new way of specifying this that will make sure no newer classes or methods are used.
	// We'll use that if it's available, but otherwise we'll use the older option.
	def targetVersion = 8
	if (JavaVersion.current().isJava9Compatible()) {
		 it.options.release = targetVersion
	}
}

java {
	// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task if it is present
	withSourcesJar()
}

jar {
	from("LICENSE") {
		rename { "${it}_${project.archivesBaseName}"}
	}
}

// configure the maven publication
publishing {
	publications {
		mavenJava(MavenPublication) {
			artifactId = project.archives_base_name

			artifact(remapJar) {
				builtBy remapJar
			}
			artifact(sourcesJar) {
				builtBy remapSourcesJar
			}

			pom {
				name = 'MMOQuark'
				description = 'A Minecraft modding library for creating modifications with Fabric.'
			}
		}
	}

	repositories {
		maven {
			if (privateProps.containsKey('mavenPassword') && privateProps.containsKey('mavenHost') && privateProps.containsKey('mavenUser')) {
				credentials {
					username privateProps.getProperty('mavenUser');
					password privateProps.getProperty('mavenPassword');
				}
				url privateProps.getProperty('mavenHost');
			} else {
				url "file:///${project.projectDir}/repo"
			}
		}
	}
}
